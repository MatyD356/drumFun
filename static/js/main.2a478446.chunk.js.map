{"version":3,"sources":["components/DrumPad.js","App.js","serviceWorker.js","index.js"],"names":["DrumPad","document","addEventListener","this","handleKeyPress","bind","props","power","getObj","getElementById","obj","keyTrigger","innerHTML","id","volume","vol","play","e","keyCode","className","onClick","handleClick","src","url","React","Component","App","state","tracks","script","createElement","async","body","appendChild","setState","handle","style","right","val","value","console","log","map","item","index","key","chandlePoower","type","min","max","step","onChange","chandleVolume","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.2a478446.chunk.js","sourcesContent":["import React from \"react\";\n\nclass DrumPad extends React.Component {\n    componentDidMount() {\n        document.addEventListener('keydown', this.handleKeyPress.bind(this));\n    }\n    handleClick() {\n        if (this.props.power === true) {\n            let getObj = document.getElementById(this.props.obj.keyTrigger);\n            let display = document.getElementById('display');\n            display.innerHTML = this.props.obj.id;\n            getObj.volume = this.props.vol\n            getObj.play();\n        }\n    }\n    handleKeyPress(e) {\n        if (this.props.power === true) {\n            if (e.keyCode === this.props.obj.keyCode) {\n                let getObj = document.getElementById(this.props.obj.keyTrigger);\n                let display = document.getElementById('display');\n                display.innerHTML = this.props.obj.id;\n                getObj.play();\n            }\n        }\n    }\n    render() {\n        return <button\n            className={this.props.className}\n            onClick={this.handleClick.bind(this)}\n            id={this.props.obj.id}>\n            <audio className=\"clip\" id={this.props.obj.keyTrigger} src={this.props.obj.url} />\n            {this.props.obj.keyTrigger}\n        </button>\n    }\n}\nexport default DrumPad","import React from \"react\";\nimport DrumPad from \"./components/DrumPad\";\nimport \"./App.css\";\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      power: false,\n      volume: 0.5,\n      tracks: [{\n        keyCode: 81,\n        keyTrigger: 'Q',\n        id: 'Heater-1',\n        url: 'https://s3.amazonaws.com/freecodecamp/drums/Heater-1.mp3'\n      }, {\n        keyCode: 87,\n        keyTrigger: 'W',\n        id: 'Heater-2',\n        url: 'https://s3.amazonaws.com/freecodecamp/drums/Heater-2.mp3'\n      }, {\n        keyCode: 69,\n        keyTrigger: 'E',\n        id: 'Heater-3',\n        url: 'https://s3.amazonaws.com/freecodecamp/drums/Heater-3.mp3'\n      }, {\n        keyCode: 65,\n        keyTrigger: 'A',\n        id: 'Heater-4',\n        url: 'https://s3.amazonaws.com/freecodecamp/drums/Heater-4_1.mp3'\n      }, {\n        keyCode: 83,\n        keyTrigger: 'S',\n        id: 'Clap',\n        url: 'https://s3.amazonaws.com/freecodecamp/drums/Heater-6.mp3'\n      }, {\n        keyCode: 68,\n        keyTrigger: 'D',\n        id: 'Open-HH',\n        url: 'https://s3.amazonaws.com/freecodecamp/drums/Dsc_Oh.mp3'\n      }, {\n        keyCode: 90,\n        keyTrigger: 'Z',\n        id: \"Kick-n'-Hat\",\n        url: 'https://s3.amazonaws.com/freecodecamp/drums/Kick_n_Hat.mp3'\n      }, {\n        keyCode: 88,\n        keyTrigger: 'X',\n        id: 'Kick',\n        url: 'https://s3.amazonaws.com/freecodecamp/drums/RP4_KICK_1.mp3'\n      }, {\n        keyCode: 67,\n        keyTrigger: 'C',\n        id: 'Closed-HH',\n        url: 'https://s3.amazonaws.com/freecodecamp/drums/Cev_H2.mp3'\n      },\n      ]\n    };\n  }\n  componentDidMount() {\n    const script = document.createElement(\"script\");\n    script.async = true;\n    script.src = \"https://cdn.freecodecamp.org/testable-projects-fcc/v1/bundle.js\";\n    document.body.appendChild(script);\n  }\n  chandlePoower() {\n    this.setState({\n      power: !this.state.power\n    })\n    let handle = document.getElementById('power-handle')\n    if (handle.innerHTML === \"OFF\") {\n      handle.innerHTML = \"ON\"\n      handle.style.right = \"50%\"\n    } else {\n      handle.innerHTML = \"OFF\"\n      handle.style.right = \"0\"\n      document.getElementById('display').innerHTML = null\n    }\n  }\n  chandleVolume() {\n    let val = document.getElementById(\"volume\").value / 100\n    val < 0 ? val = 0 : val > 1 ? val = 1 : console.log()\n    this.setState({\n      volume: val\n    })\n    document.getElementById('display').innerHTML = this.state.volume * 100\n  }\n  render() {\n    return (\n      <div className=\"App\" id=\"drum-machine\">\n        <div className='pad-container'>\n          {this.state.tracks.map((item, index) => {\n            return <DrumPad\n              className=\"drum-pad\"\n              power={this.state.power}\n              key={item.id}\n              vol={this.state.volume}\n              index={index}\n              obj={item} />\n          })}\n        </div>\n        <div className=\"config-container\">\n          <div className=\"power-container\">\n            <div className=\"config-title\">Power</div>\n            <div id=\"power\" className=\"power\" onClick={this.chandlePoower.bind(this)}><div id=\"power-handle\" className=\"power-handle\">OFF</div>\n            </div>\n          </div>\n          <div id=\"display\" className=\"display\"> </div>\n          <div className=\"volume-handle\">\n            <p className=\"volume-title\">Volume</p>\n            <input id=\"volume\" className=\"slider\" type=\"range\" min=\"-10\" max=\"110\" step=\"10\" onChange={\n              this.chandleVolume.bind(this)\n            } />\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}